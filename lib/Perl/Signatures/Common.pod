=pod

=head1 NAME

Perl::Signatures::Common - common API documentation for Perl function signatures

=head1 DESCRIPTION

This is documentation to coordinate the multiple implementations of
Perl method and function signatures on CPAN.  It provides common
definitions of features and tests for those features.

Authors are not expected to implement them all, but if they do
implement a feature they should try to do it as defined here.  Barring
that, they should explicitly document what is different.

The tests are provided to be copied and pasted into your distribution
to test individual features.


=head2 Status Of This Document

This is basically a cut & paste of Method::Signatures with the most
objectionable parts removed.  Contributors are encouraged to directly
edit this document to improve it, just be sure to log your rationale.
At least now we can argue in a concrete fashion.

Anything contentious, post as an issue:
L<http://github.com/schwern/Perl-Signatures-Common/issues>.

The tests are in a similar state.


=head2 Basic Intent

The basic model for Perl 5 Signatures is Perl 6 Signatures.  See
L<http://perlcabal.org/syn/S06.html#Parameters_and_arguments> for
details.

Much of this is not applicable or not feasible to implement in Perl 5,
but its a baseline.


=head2 Basic Definition

=for notes
I doubt folks agree on "func".

C<func> is like C<sub> but takes a signature where the prototype would
normally go.  This takes the place of C<my($foo, $bar) = @_> and does
a whole lot more.

C<method> is like C<func> but specificly for making methods.  It will
automatically provide the invocant as C<$self>.  No more C<my $self =
shift>.

Also allows signatures, very similar to Perl 6 signatures.

And it does all this with B<no source filters>.

=head2 Routine Traits

Both C<func> and C<method> might be subject to a trait. A trait
modifies how the code is evaluated, possibly doing some additional
checks or enclosing the code into a transaction, for instance.

The actual mechanism behind the modification is specific to each
signature implementation, the Moose version would make the method an
object and apply the trait to it, while a simpler implementation would
simply wrap the code into another closure.

The syntax for traits is compatible with Perl 6.

    method foo($bar) does something { ... }
    # or
    func baz($bla) does othertrait { ... }

The trait name is a symbol whose declaration is specific to each
implementation.

=head2 Signature syntax

    func echo($message) {
        print "$message\n";
    }

is equivalent to:

    sub echo {
        my($message) = @_;
        print "$message\n";
    }

except the original line numbering is preserved and the arguments are
checked to make sure they match the signature.

Similarly

    method foo($bar, $baz) {
        $self->wibble($bar, $baz);
    }

is equivalent to:

    sub foo {
        my $self = shift;
        my($bar, $baz) = @_;
        $self->wibble($bar, $baz);
    }

Equivalencies are for illustrative purposes only.


=head3 C<@_>

Except for C<method> (see below), signatures leave C<@_> intact.

    func foo ($this, $that) {
        print "$this, $that\n";

        my $num_params = @_;
        print "Got $num_params parameters\n";
    }

    foo("up", "down");  # "up, down\n", "Got 2 parameters\n"

C<method> will remove the first argument from C<@_>.

    method foo ($this, $that) {
        print "$this, $that\n";

        my $num_params = @_;
        print "Got $num_params parameters\n";
    }

    $obj->foo("up", "down");  # "up, down\n", "Got 2 parameters\n"


=head3 Named parameters

Parameters can be passed in named, as a hash, using the C<:$arg> syntax.

    method foo(:$arg) {
        ...
    }

    Class->foo( arg => 42 );

Named parameters by default are optional.

Required positional parameters and named parameters can be mixed, but
the named params must come last.

    method foo( $a, $b, :$c )   # legal

=for note
Hash or hash ref?  Hash ref is less ambiguous and avoids a copy.

Named parameters are passed in as a hash after all positional arguments.

    method display( $text, :$justify = 'left', :$enchef = 0 ) {
        ...
    }

    # $text = "Some stuff", $justify = "right", $enchef = 0
    $obj->display( "Some stuff", justify => "right" );

You cannot mix optional positional params with named params as that
leads to ambiguities.

    method foo( $a, $b?, :$c )  # illegal

    # Is this $a = 'c', $b = 42 or $c = 42?
    $obj->foo( c => 42 );


=head3 Invocant parameter

The method invocant (ie. C<$self>) can be changed as the first
parameter.  Put a colon after it instead of a comma.

    method foo($class:) {
        $class->bar;
    }

    method stuff($class: $arg, $another) {
        $class->things($arg, $another);
    }

C<method> has an implied default of C<$self:>.  C<func> has no
invocant.


=head3 Defaults

Each parameter can be given a default with the C<$arg = EXPR> syntax.
For example,

    method add($this = 23, $that = 42) {
        return $this + $that;
    }

Defaults will only be used if the argument is not passed in at all.
Passing in C<undef> will override the default.  That means...

    Class->add();            # $this = 23, $that = 42
    Class->add(99);          # $this = 99, $that = 42
    Class->add(99, undef);   # $this = 99, $that = undef

Almost any expression can be used as a default.

    method silly(
        $num    = 42,
        $string = q[Hello, world!],
        $hash   = { this => 42, that => 23 },
        $code   = sub { $num + 4 },
        @nums   = (1,2,3),
    )
    {
        ...
    }

Earlier parameters may be used in later defaults.

    method copy_cat($this, $that = $this) {
        return $that;
    }

All variables with defaults are considered optional.  To define an
argument with a default as required is an error.

    func foo($arg! = 42) {  # error, makes no sense
        ...
    }


=head3 Parameter traits

Each parameter can be assigned a trait with the C<$arg is TRAIT> syntax.

    method stuff($this is ro) {
        ...
    }

To allow for future expansion, any unknown trait is ignored.

Most parameters have default traits of C<is rw is copy>.

=over 4

=item B<ro>

Read-only.  Assigning or modifying the parameter is an error.

=item B<rw>

Read-write.  It's ok to read or write the parameter.

This is a default trait.

=item B<copy>

The parameter will be a copy of the argument (just like C<<my $arg = shift>>).

This is a default trait except for the C<\@foo> parameter.

=back

=head3 Traits and defaults

To have a parameter which has both a trait and a default, set the
trait first and the default second.

    method echo($message is ro = "what?") {
        return $message
    }

Think of it as C<$message is ro> being the left-hand side of the assignment.


=head3 Optional parameters

To declare a parameter optional, use the C<$arg?> syntax.

All parameters with defaults are optional.


=head3 Required parameters

To declare a parameter as required, use the C<$arg!> syntax.

All parameters without defaults are required unless declared otherwise.


=head3 The C<@_> signature

The @_ signature is a special case which does not do any checks on its
arguments.  This allows you to do argument checking manually.

    func foo(@_) {
        my $thing = pop @_;  # or whatever
        ...
    }

C<method> will still remove the invocant.

    method foo(@_) {
        $self->stuff(@_);
    }


=head2 Anonymous Methods

An anonymous methods and functions can be declared just like normal.

    my $method = method ($arg) {
        print $self->foo($arg);
    };

    $obj->$method(42);

    my $func = func ($arg) {
        print $arg;
    }

    $func->(42);


=head2 Differences from Perl 6

Method::Signatures is mostly a straight subset of Perl 6 signatures.
The important differences...

=head3 Restrictions on named parameters

As noted above, there are more restrictions on named parameters than
in Perl 6.

=head3 Named parameters are just hashes

Perl 5 lacks all the fancy named parameter syntax for the caller.

=head3 Parameters are copies.

In Perl 6, parameters are aliases.  This makes sense in Perl 6 because
Perl 6 is an "everything is an object" language.  In Perl 5 is not, so
parameters are much more naturally passed as copies.

=head3 Can't use positional params as named params

Perl 6 allows you to use any parameter as a named parameter.  Perl 5
lacks the named parameter disambiguating syntax so it is not allowed.

=head3 Addition of the C<@_> prototype

Method::Signatures lets you punt and use @_ like in regular Perl 5.


=head1 PERFORMANCE

Implementations should strive not to impose a runtime penalty greater
than reasonable manual argument checking would.


=head1 LICENSE

Copyright 2010 by Michael G Schwern E<lt>schwern@pobox.comE<gt>.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

See F<http://www.perl.com/perl/misc/Artistic.html>
